const User = require('../models/user.model');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
const { sendOtpEmail } = require("../utils/emailService");

class AuthController {
    // Register new user
    async register(req, res) {
        try {
            // Check validation results
            const errors = validationResult(req);
            if (!errors.isEmpty()) {
                return res.status(400).json({ errors: errors.array() });
            }

            const { email, password, full_name } = req.body;

            // Check if user already exists
            const existingUser = await User.findByEmail(email);
            if (existingUser) {
                return res.status(400).json({ 
                    message: 'Email ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!' 
                });
            }

            // Hash password
            const salt = await bcrypt.genSalt(10);
            const password_hash = await bcrypt.hash(password, salt);

            // Create new user
            const user = new User({
                email,
                password_hash,
                full_name,
                is_active: true
            });

            const userId = await user.create();

            res.status(201).json({
                message: 'User registered successfully',
                user: {
                    id: userId,
                    email,
                    full_name
                }
            });
        } catch (error) {
            console.error('Registration error:', error);
            res.status(500).json({ message: 'Error registering user' });
        }
    }

    // Login user
    async login(req, res) {
        try {
          // Ki·ªÉm tra k·∫øt qu·∫£ validate
          const errors = validationResult(req);
          if (!errors.isEmpty()) {
            return res.status(400).json({ errors: errors.array() });
          }
      
          const { email, password } = req.body;
      
          // T√¨m user theo email
          const user = await User.findByEmail(email);
          if (!user) {
            return res.status(401).json({ 
              message: 'email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá' 
            });
          }
      
          // Ki·ªÉm tra tr·∫°ng th√°i active c·ªßa user
          if (!user.is_active) {
            return res.status(401).json({ 
              message: 'T√†i kho·∫£n b·ªã kh√≥a!' 
            });
          }
      
          // X√°c th·ª±c m·∫≠t kh·∫©u
          const isValidPassword = await bcrypt.compare(password, user.password_hash);
          if (!isValidPassword) {
            return res.status(401).json({ 
              message: 'email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá' 
            });
          }
      
          // T·∫°o JWT token v·ªõi th·ªùi h·∫°n 24 gi·ªù
          const token = jwt.sign(
            { id: user.id, email: user.email, role: user.role },
            process.env.JWT_SECRET,
            { expiresIn: '3h' }
          );
      
          // Set cookie "token" v√†o response, s·ª≠ d·ª•ng c√°c t√πy ch·ªçn b·∫£o m·∫≠t:
          res.cookie('token', token, {
            httpOnly: true, // Kh√¥ng cho ph√©p truy c·∫≠p t·ª´ JavaScript tr√™n client
            secure: process.env.NODE_ENV === 'production', // Ch·ªâ g·ª≠i cookie qua HTTPS trong production
            maxAge: 3 * 60 * 60 * 1000, // 24 gi·ªù (t√≠nh theo ms)
            sameSite: 'Strict', // NgƒÉn ch·∫∑n CSRF
            path: '/',
          });
      
          // Tr·∫£ v·ªÅ response th√†nh c√¥ng
          return res.json({
            message: 'Login successful',
            token, 
            user: {
              id: user.id,
              email: user.email,
              full_name: user.full_name
            }
          });
        } catch (error) {
          console.error('Login error:', error);
          return res.status(500).json({ message: 'Error logging in' });
        }
      }
    
      // logout current user
    async logout(req, res) {
    // X√≥a cookie 'token'
    res.clearCookie('token', {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        path: '/',
    });
    return res.json({ message: 'Logout successful' });
    }

    // Get current user profile
    async getProfile(req, res) {
        try {
            const user = await User.findById(req.user.id);
            if (!user) {
                return res.status(404).json({ message: 'User not found' });
            }

            // Remove sensitive data
            delete user.password_hash;

            res.json(user);
        } catch (error) {
            console.error('Get profile error:', error);
            res.status(500).json({ message: 'Error fetching profile' });
        }
    }

    // Change password
    async changePassword(req, res) {
        try {
            const { currentPassword, newPassword } = req.body;

            // Find user
            const user = await User.findById(req.user.id);
            if (!user) {
                return res.status(404).json({ message: 'User not found' });
            }

            // Verify current password
            const isValidPassword = await bcrypt.compare(
                currentPassword, 
                user.password_hash
            );
            if (!isValidPassword) {
                return res.status(401).json({ 
                    message: 'Current password is incorrect' 
                });
            }

            if (newPassword.length < 8) {
                return res.status(400).json({ message: 'M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±' });
            }

            // Hash new password
            const salt = await bcrypt.genSalt(10);
            const newPasswordHash = await bcrypt.hash(newPassword, salt);

            // Update password
            await User.update(user.id, { password_hash: newPasswordHash });

            res.json({ message: 'Password changed successfully' });
        } catch (error) {
            console.error('Change password error:', error);
            res.status(500).json({ message: 'Error changing password' });
        }
    }

    // send OTP
    async sendOtp(req, res) {
        try {
            const { email, full_name } = req.body;
    
            // üîπ Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
            let user = await User.findByEmail(email);
            if (!user) {
                console.log("‚ö†Ô∏è Email ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi user...");
                const tempPassword = crypto.randomBytes(8).toString("hex"); // T·∫°o m·∫≠t kh·∫©u t·∫°m
                const passwordHash = await bcrypt.hash(tempPassword, 10);
                user = new User({ email, password_hash: passwordHash, full_name: full_name });
                user.id = await user.create(); // L∆∞u v√†o DB
            }
    
            // üîπ T·∫°o OTP
            const otp = crypto.randomInt(100000, 999999).toString();
            await User.saveOtp(user.id, otp, 300); // L∆∞u OTP v√†o DB
    
            // üîπ G·ª≠i OTP qua email
            await sendOtpEmail(email, otp);
    
            return res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n" });
        } catch (error) {
            console.error("‚ùå L·ªói g·ª≠i OTP:", error);
            res.status(500).json({ message: "L·ªói khi g·ª≠i OTP" });
        }
    }
  
    // H√†m g·ª≠i email OTP (d√πng Gmail ho·∫∑c d·ªãch v·ª• kh√°c)
    async sendOtpEmail(email, otp) {
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: process.env.EMAIL_USERNAME, 
                pass: process.env.EMAIL_PASSWORD  
            }
        });
    
        await transporter.sendMail({
            from: process.env.EMAIL_USERNAME,
            to: email,
            subject: 'M√£ OTP x√°c th·ª±c c·ªßa b·∫°n',
            text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 5 ph√∫t.`,
        });
    }

    // Verify OTP
    async VerifyOTP(req, res) {
        try {
            const { email, otp, password, full_name } = req.body;
            console.log("üìß X√°c th·ª±c OTP:", email, otp, password, full_name);
    
            // üî• L·∫•y `user_id` t·ª´ b·∫£ng `users`
            let user = await User.findByEmail(email);
            let isNewUser = false;
    
            if (!user) {
                console.log("üÜï Email ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi user...");
                isNewUser = true;
            }
    
            // üî• L·∫•y OTP t·ª´ b·∫£ng `user_otps` b·∫±ng `user_id`
            const storedOtp = await User.getOtpByUserID(user?.id); // Tr√°nh l·ªói n·∫øu user ch∆∞a t·ªìn t·∫°i
            console.log("üîê OTP l∆∞u trong DB:", storedOtp);
            if (!storedOtp || storedOtp.otp !== otp) {
                return res.status(400).json({ message: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
            }
    
            // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n OTP
            const currentTime = new Date().getTime();
            if (currentTime > new Date(storedOtp.expires_at).getTime()) {
                return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n." });
            }
    
            // Hash m·∫≠t kh·∫©u
            const salt = await bcrypt.genSalt(10);
            const password_hash = await bcrypt.hash(password, salt);
    
            if (isNewUser) {
                // üî• N·∫øu user ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
                const newUser = new User({ email, password_hash, full_name, is_active: true });
                const userId = await newUser.create();
                user = { id: userId, email, full_name }; // C·∫≠p nh·∫≠t user ƒë·ªÉ s·ª≠ d·ª•ng ti·∫øp
            } else {
                // üî• N·∫øu user ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
                // C·∫≠p nh·∫≠t th√¥ng tin user sau khi x√°c minh OTP th√†nh c√¥ng
                await User.update(user.id, { password_hash: password_hash });
            }
    
            // X√≥a OTP sau khi x√°c nh·∫≠n th√†nh c√¥ng
            await User.deleteOtp(user.id);
    
            return res.status(201).json({
                message: isNewUser ? "ƒêƒÉng k√Ω th√†nh c√¥ng!" : "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
                user: { id: user.id, email, full_name },
            });
        } catch (error) {
            console.error("‚ùå L·ªói x√°c nh·∫≠n OTP:", error);
            res.status(500).json({ message: "L·ªói khi x√°c nh·∫≠n OTP." });
        }
    }    
    
}

module.exports = new AuthController();